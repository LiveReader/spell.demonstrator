/*
 * SPELL API
 * This is an experimental SPELL-Platform server.  You can find out more about SPELL at [https://spell-plattform.de](https://spell-plattform.de). There is no authentication.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@spell-plattform.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {NotitiaExportFormat} from '../model/NotitiaExportFormat';
import {OperationList} from '../model/OperationList';
import {OperationObject} from '../model/OperationObject';
import {ScenarioLoadBody} from '../model/ScenarioLoadBody';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteAttribute operation.
     * @callback moduleapi/DefaultApi~deleteAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an attribute object
     * @param {String} attributeId String ID of the Attribute to delete
     * @param {module:api/DefaultApi~deleteAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAttribute(attributeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling deleteAttribute");
      }

      let pathParams = {
        'attributeId': attributeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/attribute/{attributeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteDataObject operation.
     * @callback moduleapi/DefaultApi~deleteDataObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a DataObject object
     * @param {String} dataObjectId String ID of the DataObject to delete
     * @param {module:api/DefaultApi~deleteDataObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDataObject(dataObjectId, callback) {
      
      let postBody = null;
      // verify the required parameter 'dataObjectId' is set
      if (dataObjectId === undefined || dataObjectId === null) {
        throw new Error("Missing the required parameter 'dataObjectId' when calling deleteDataObject");
      }

      let pathParams = {
        'dataObjectId': dataObjectId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/dataObject/{dataObjectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the exportGraph operation.
     * @callback moduleapi/DefaultApi~exportGraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotitiaExportFormat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a Notitia JSON dump
     * @param {module:api/DefaultApi~exportGraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    exportGraph(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotitiaExportFormat;

      return this.apiClient.callApi(
        '/graph', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOperation operation.
     * @callback moduleapi/DefaultApi~getOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationObject{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific operation object by ID
     * @param {String} operationId String ID of the operation to get
     * @param {module:api/DefaultApi~getOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOperation(operationId, callback) {
      
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling getOperation");
      }

      let pathParams = {
        'operationId': operationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationObject;

      return this.apiClient.callApi(
        '/operation/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOperationList operation.
     * @callback moduleapi/DefaultApi~getOperationListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of operation objects
     * @param {module:api/DefaultApi~getOperationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOperationList(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationList;

      return this.apiClient.callApi(
        '/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the importGraph operation.
     * @callback moduleapi/DefaultApi~importGraphCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a Notitia JSON dump
     * @param {module:model/NotitiaExportFormat} body Node array and link array that are loaded into the DB. The  database will be resetted.
     * @param {module:api/DefaultApi~importGraphCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importGraph(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling importGraph");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/graph', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the loadScenarios operation.
     * @callback moduleapi/DefaultApi~loadScenariosCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load a list of scenarios into the datatbase
     * @param {module:model/ScenarioLoadBody} body 
     * @param {module:api/DefaultApi~loadScenariosCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadScenarios(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling loadScenarios");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/scenario/load', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the resetDatabase operation.
     * @callback moduleapi/DefaultApi~resetDatabaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset the database to a predefined state
     * @param {module:api/DefaultApi~resetDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetDatabase(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}