/*
 * SPELL API
 * This is an experimental SPELL-Platform server.  You can find out more about SPELL at [https://spell-plattform.de](https://spell-plattform.de). There is no authentication.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@spell-plattform.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {DataObject} from '../model/DataObject';
import {OperationList} from '../model/OperationList';
import {ScenarioLoadBody} from '../model/ScenarioLoadBody';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createDataObject operation.
     * @callback moduleapi/DefaultApi~createDataObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new DataObject and subordinate DataObject
     * @param {module:model/DataObject} body The DataObject to create
     * @param {String} operationId Encoded String ID of the Operation DataObject this DataObject belongs to
     * @param {String} parentDataObjectId Encoded String ID of the parent DataObject pointing to this DataObject via hasA
     * @param {module:api/DefaultApi~createDataObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createDataObject(body, operationId, parentDataObjectId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDataObject");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling createDataObject");
      }
      // verify the required parameter 'parentDataObjectId' is set
      if (parentDataObjectId === undefined || parentDataObjectId === null) {
        throw new Error("Missing the required parameter 'parentDataObjectId' when calling createDataObject");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'operationId': operationId,'parentDataObjectId': parentDataObjectId
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/dataObject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the debug operation.
     * @callback moduleapi/DefaultApi~debugCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the whole Jena model in JSON-LD representation
     * @param {module:api/DefaultApi~debugCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    debug(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/debug', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteAttribute operation.
     * @callback moduleapi/DefaultApi~deleteAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an attribute object
     * @param {String} id Encoded String ID of the Attribute to delete
     * @param {String} operationId Encoded String ID of the Operation DataObject this Attribute belongs to
     * @param {Boolean} valueOnly 
     * @param {module:api/DefaultApi~deleteAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAttribute(id, operationId, valueOnly, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAttribute");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling deleteAttribute");
      }
      // verify the required parameter 'valueOnly' is set
      if (valueOnly === undefined || valueOnly === null) {
        throw new Error("Missing the required parameter 'valueOnly' when calling deleteAttribute");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id,'operationId': operationId,'valueOnly': valueOnly
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/attribute', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteDataObject operation.
     * @callback moduleapi/DefaultApi~deleteDataObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a DataObject object
     * @param {String} id Encoded String ID of the DataObject to delete
     * @param {String} operationId Encoded String ID of the Operation DataObject this DataObject belongs to
     * @param {Boolean} cascadingDelete Cascading option will delete all DataObjects connected via asserted hasA (not inferred)
     * @param {module:api/DefaultApi~deleteDataObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDataObject(id, operationId, cascadingDelete, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDataObject");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling deleteDataObject");
      }
      // verify the required parameter 'cascadingDelete' is set
      if (cascadingDelete === undefined || cascadingDelete === null) {
        throw new Error("Missing the required parameter 'cascadingDelete' when calling deleteDataObject");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id,'operationId': operationId,'cascadingDelete': cascadingDelete
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/dataObject', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDataObject operation.
     * @callback moduleapi/DefaultApi~getDataObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataObject{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific DataObject by ID
     * @param {String} id Encoded String ID of the DataObject to get
     * @param {module:api/DefaultApi~getDataObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDataObject(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataObject");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataObject;

      return this.apiClient.callApi(
        '/dataObject', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOperationList operation.
     * @callback moduleapi/DefaultApi~getOperationListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of operation objects
     * @param {module:api/DefaultApi~getOperationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOperationList(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationList;

      return this.apiClient.callApi(
        '/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the loadScenarios operation.
     * @callback moduleapi/DefaultApi~loadScenariosCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load a list of scenarios into the database
     * @param {module:model/ScenarioLoadBody} body 
     * @param {module:api/DefaultApi~loadScenariosCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadScenarios(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling loadScenarios");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/scenario/load', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the resetDatabase operation.
     * @callback moduleapi/DefaultApi~resetDatabaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset the database to a predefined state
     * @param {module:api/DefaultApi~resetDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetDatabase(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateAttribute operation.
     * @callback moduleapi/DefaultApi~updateAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the value of an existing Attribute
     * @param {String} id Encoded String ID of the Attribute to update
     * @param {String} operationId Encoded String ID of the Operation DataObject this Attribute belongs to
     * @param {String} attributeValue The new value of the Attribute
     * @param {module:api/DefaultApi~updateAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAttribute(id, operationId, attributeValue, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAttribute");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling updateAttribute");
      }
      // verify the required parameter 'attributeValue' is set
      if (attributeValue === undefined || attributeValue === null) {
        throw new Error("Missing the required parameter 'attributeValue' when calling updateAttribute");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id,'operationId': operationId,'attributeValue': attributeValue
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/attribute', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateDataObject operation.
     * @callback moduleapi/DefaultApi~updateDataObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing DataObject and subordinate DataObject
     * @param {module:model/DataObject} body The DataObject and all subordinate DataObjects in their current version
     * @param {String} operationId Encoded String ID of the Operation DataObject this DataObject belongs to
     * @param {String} parentDataObjectId Encoded String ID of the parent DataObject pointing to this DataObject via hasA
     * @param {Boolean} updateSubordinateDataObject Decides whether subordinate DataObjects should be updated
     * @param {module:api/DefaultApi~updateDataObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDataObject(body, operationId, parentDataObjectId, updateSubordinateDataObject, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDataObject");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling updateDataObject");
      }
      // verify the required parameter 'parentDataObjectId' is set
      if (parentDataObjectId === undefined || parentDataObjectId === null) {
        throw new Error("Missing the required parameter 'parentDataObjectId' when calling updateDataObject");
      }
      // verify the required parameter 'updateSubordinateDataObject' is set
      if (updateSubordinateDataObject === undefined || updateSubordinateDataObject === null) {
        throw new Error("Missing the required parameter 'updateSubordinateDataObject' when calling updateDataObject");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'operationId': operationId,'parentDataObjectId': parentDataObjectId,'updateSubordinateDataObject': updateSubordinateDataObject
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/dataObject', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}