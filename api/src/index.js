/*
 * SPELL API
 * This is an experimental SPELL-Platform server.  You can find out more about SPELL at [https://spell-plattform.de](https://spell-plattform.de). There is no authentication.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@spell-plattform.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from './ApiClient';
import {Attribute} from './model/Attribute';
import {DataObject} from './model/DataObject';
import {NotitiaEdge} from './model/NotitiaEdge';
import {NotitiaExportFormat} from './model/NotitiaExportFormat';
import {NotitiaNode} from './model/NotitiaNode';
import {NotitiaNodeShape} from './model/NotitiaNodeShape';
import {NotitiaTaxonomy} from './model/NotitiaTaxonomy';
import {OntologyClass} from './model/OntologyClass';
import {OperationList} from './model/OperationList';
import {OperationListNodes} from './model/OperationListNodes';
import {OperationObject} from './model/OperationObject';
import {ScenarioLoadBody} from './model/ScenarioLoadBody';
import {DefaultApi} from './api/DefaultApi';

/**
* This_is_an_experimental_SPELL_Platform_server___You_can_find_out_more_about_SPELL_at__httpsspell_plattform_de_httpsspell_plattform_de__There_is_no_authentication_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SpellApi = require('index'); // See note below*.
* var xxxSvc = new SpellApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SpellApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SpellApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SpellApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Attribute model constructor.
     * @property {module:model/Attribute}
     */
    Attribute,

    /**
     * The DataObject model constructor.
     * @property {module:model/DataObject}
     */
    DataObject,

    /**
     * The NotitiaEdge model constructor.
     * @property {module:model/NotitiaEdge}
     */
    NotitiaEdge,

    /**
     * The NotitiaExportFormat model constructor.
     * @property {module:model/NotitiaExportFormat}
     */
    NotitiaExportFormat,

    /**
     * The NotitiaNode model constructor.
     * @property {module:model/NotitiaNode}
     */
    NotitiaNode,

    /**
     * The NotitiaNodeShape model constructor.
     * @property {module:model/NotitiaNodeShape}
     */
    NotitiaNodeShape,

    /**
     * The NotitiaTaxonomy model constructor.
     * @property {module:model/NotitiaTaxonomy}
     */
    NotitiaTaxonomy,

    /**
     * The OntologyClass model constructor.
     * @property {module:model/OntologyClass}
     */
    OntologyClass,

    /**
     * The OperationList model constructor.
     * @property {module:model/OperationList}
     */
    OperationList,

    /**
     * The OperationListNodes model constructor.
     * @property {module:model/OperationListNodes}
     */
    OperationListNodes,

    /**
     * The OperationObject model constructor.
     * @property {module:model/OperationObject}
     */
    OperationObject,

    /**
     * The ScenarioLoadBody model constructor.
     * @property {module:model/ScenarioLoadBody}
     */
    ScenarioLoadBody,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
