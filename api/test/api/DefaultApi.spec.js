/*
 * SPELL API
 * This is an experimental SPELL-Platform server.  You can find out more about SPELL at [https://spell-plattform.de](https://spell-plattform.de). There is no authentication.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@spell-plattform.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpellApi);
  }
}(this, function(expect, SpellApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpellApi.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('createDataObject', function() {
        it('should call createDataObject successfully', function(done) {
          // TODO: uncomment, update parameter values for createDataObject call
          /*

          instance.createDataObject(body, operationId, parentDataObjectId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('debug', function() {
        it('should call debug successfully', function(done) {
          // TODO: uncomment debug call and complete the assertions
          /*

          instance.debug(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAttribute', function() {
        it('should call deleteAttribute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAttribute call
          /*

          instance.deleteAttribute(id, operationId, valueOnly, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDataObject', function() {
        it('should call deleteDataObject successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDataObject call
          /*

          instance.deleteDataObject(id, operationId, cascadingDelete, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataObject', function() {
        it('should call getDataObject successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataObject call and complete the assertions
          /*

          instance.getDataObject(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpellApi.DataObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOperationList', function() {
        it('should call getOperationList successfully', function(done) {
          // TODO: uncomment getOperationList call and complete the assertions
          /*

          instance.getOperationList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpellApi.OperationList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loadScenarios', function() {
        it('should call loadScenarios successfully', function(done) {
          // TODO: uncomment, update parameter values for loadScenarios call
          /*

          instance.loadScenarios(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('resetDatabase', function() {
        it('should call resetDatabase successfully', function(done) {
          // TODO: uncomment resetDatabase call
          /*

          instance.resetDatabase(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateAttribute', function() {
        it('should call updateAttribute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateAttribute call
          /*

          instance.updateAttribute(id, operationId, attributeValue, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDataObject', function() {
        it('should call updateDataObject successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDataObject call
          /*

          instance.updateDataObject(body, operationId, parentDataObjectId, updateSubordinateDataObject, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
